#name: Unit Tests and Sonar Check
#
#on:
#  push:
#    paths-ignore:
#      - '.azure/**'
#      - '.github/**'
#      - '!.github/workflows/pytest.yml'
#      - 'ext/**'
#      - '**.md'
#  pull_request:
#    types: [opened, synchronize, reopened]
#    paths-ignore:
#      - '.azure/**'
#      - '.github/**'
#      - '!.github/workflows/pytest.yml'
#      - 'ext/**'
#      - '**.md'
#
#jobs:
#  # skip duplicated jobs: https://github.com/marketplace/actions/skip-duplicate-actions#skip-concurrent-workflow-runs
#  pre_job:
#    if: ${{ !(github.event_name == 'push' && (github.ref == 'refs/heads/dev') && contains(github.event.head_commit.message, 'Merge pull request')) }}
#    runs-on: self-hosted
#    # Map a step output to a job output
#    outputs:
#      should_skip: ${{ steps.skip_check.outputs.should_skip }}
#    steps:
#      - id: skip_check
#        uses: fkirc/skip-duplicate-actions@master
#        with:
#          concurrent_skipping: 'same_content'
#          paths_ignore: '["**/*.md", "**/*.po", ".docker/**"]'
#          do_not_skip: '["pull_request"]'
#
#  tests:
#    needs: pre_job
#    if: needs.pre_job.outputs.should_skip != 'true'
#    timeout-minutes: 10
#
#    runs-on: ubuntu-latest
#    outputs:
#      code: ${{ steps.filter.outputs.code }}
#    strategy:
#      matrix:
#        test-suite: [aml, common, common_2, data_privacy, infosec, shared]
#
#    steps:
#    - uses: actions/checkout@v3
#    # see the description: https://github.com/dorny/paths-filter
#    - uses: dorny/paths-filter@v2
#      id: filter
#      with:
#        filters: |
#          code:
#            - '**/*.py'
#    - name: Set up Python 3.10
#      uses: actions/setup-python@v4
#      with:
#        python-version: '3.10'
#        cache: 'pip'
#    - name: Install Dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install -r requirements.txt
#        pip install -r requirements_tests.txt
#    - name: Make envfile
#      uses: SpicyPizza/create-envfile@v1.2
#      with:
#        envkey_DEBUG: TRUE
#        envkey_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
#        envkey_SPA_URL: https://app.secjur.test:8080
#        envkey_SESSION_COOKIE_DOMAIN: .secjur.test
#        envkey_CSRF_COOKIE_DOMAIN: .secjur.test
#        envkey_CSRF_TRUSTED_ORIGIN: app.secjur.test:8080
#        envkey_CSRF_TRUSTED_ORIGIN_BACKEND: http://localhost.test:8000
#        envkey_INTEGRATION_API_ENABLED: True
#        envkey_EMAIL_HOST: secjur.test
#        envkey_EMAIL_HOST_USER: github.test.action
#        envkey_EMAIL_HOST_PASSWORD: ''
#        envkey_EMAIL_PORT: ''
#        envkey_EMAIL_USE_TLS: ''
#        envkey_CELERY_BROKER_URL: ''
#        envkey_CELERY_RESULT_BACKEND: ''
#        envkey_CELERY_REDBEAT_REDIS_URL: ''
#        envkey_AVAILABILITY_TEST_CLIENT_API_KEY: ''
#        envkey_AZURE_STORAGE_CONNECTION_STRING: ''
#        envkey_AZURE_SNAPSHOTS_CONTAINER_NAME: ''
#        envkey_RATELIMIT_BACKEND: 'django.core.cache.backends.locmem.LocMemCache'
#        envkey_RATELIMIT_CACHE: 'unique-snowflake'
#        envkey_MSIP_TENANT: '${{ env.MSIP_TENANT }}'
#        envkey_MSIP_CLIENT_ID: ''
#        envkey_MSIP_CLIENT_SECRET: ''
#        file_name: .env
#    - name: Check the env-file
#      # create-env action creates a file with colons as a separator, we need to turn all colons into `=`
#      run: |
#        sed -i 's/: /=/' .env
#        mv .env core
#        cat core/.env
#    - id: run-tests
#      name: Run Tests
#      timeout-minutes: 7
#      run: |
#        pytest tests/${{ matrix.test-suite }}/ --junitxml=junit_${{ matrix.test-suite }}.xml
#    - name: Upload Test Results
#      # Upload results even if the tests failed (that's essential!)
#      if: always()
#      uses: actions/upload-artifact@v2
#      with:
#        name: Test Results
#        retention-days: 10
#        path: |
#          junit_${{ matrix.test-suite }}.xml
#
#  sonar:
#    name: "SonarQube check"
#    runs-on: ubuntu-latest
#    needs: tests
#    steps:
#    # If Python files were modified, perform the checkout and SonarQube scan
#    - name: Checkout code
#      if: needs.tests.outputs.code == 'true'
#      uses: actions/checkout@v3
#      with:
#        fetch-depth: 0
#
#    - name: Run SonarQube scan
#      if: needs.tests.outputs.code == 'true'
#      uses: sonarsource/sonarqube-scan-action@master
#      env:
#        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#
#    # If no Python files were modified, just set a "success" status
#    - name: Set success status
#      if: needs.tests.outputs.code != 'true'
#      run: echo "No Python files were modified. Setting success status for SonarQube check."
#
#
#  event_file:
#    # Event file is needed to report on the executed tests back to the branch
#    name: "Event File"
#    runs-on: self-hosted
#    needs: pre_job
#    if: needs.pre_job.outputs.should_skip != 'true'
#    steps:
#    - name: Upload
#      uses: actions/upload-artifact@v2
#      with:
#        name: Event File
#        retention-days: 7
#        path: ${{ github.event_path }}
